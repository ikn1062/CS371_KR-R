;;;; -*-  Mode: LISP; Syntax: Common-Lisp; Base: 10                          -*-
;;;; ---------------------------------------------------------------------------
;;;; File name: project-ontology.meld
;;;;    System: FIRE
;;;;    Author: Aryan Jain, Ishaan Narain, Patrick Pynadath
;;;;   Created: Feburary 20, 2022 09:30:25
;;;;   Purpose: 371 Project Assignment
;;;; ---------------------------------------------------------------------------
;;;;  modified: Sunday, Feburary 27, 2022
;;;; ---------------------------------------------------------------------------

;;; Simple ontology for experimenting with the Horn-clause based query system
;;; in FIRE
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(in-microtheory FinancialHealthTestMt)

(isa FinancialHealthTestMt Microtheory)
(comment FinancialHealthTestMt
  "FinancialHealthTestMt is a microtheory for testing testing the financial health of a given company.")
(genlMt FinancialHealthTestMt CompanyDataMt)


(isa companyFHT Predicate)
(arity companyFHT 2)
(arg1isa companyFHT Number)
(arg2isa companyFHT Business)

(genls CompanyFHT Number)
(comment CompanyFHT
  "A Company-FHT is a collection that contains the dimensions of financial health of a given company.
	The financial health of a given company includes Short-term Liquidity, Long-term Solvency, Profitability, and Utility.")

;;; Any new predicates you need to define should go here.
;;; Every new predicate needs to have an isa statement saying what it
;;; is an instance of, an arity statement, argIsa statements declaring the
;;; types of its arguments, a genlPreds statement connecting it into the predicate
;;; hiearchy, and a comment describing in English its intended meaning.


;;; Numbers 1 to 5 indicate the health of the company in a certain dimension. For example, 1 pertains to Very Bad and 5 pertains to Very Good.

(isa companyHealth Predicate)
(arity companyHealth 2)
(arg1isa companyHealth Index-IndicatorOrMeasure)
(arg2isa companyHealth Index-IndicatorOrMeasure)

(isa stlHealth Predicate)
(arity stlHealth 2)
(arg1isa stlHealth Index-IndicatorOrMeasure)
(arg2isa stlHealth Index-IndicatorOrMeasure)

(isa valShortTermLiquidity Predicate)
(arity valShortTermLiquidity 4)
(arg1isa valShortTermLiquidity Business)
(arg2isa valShortTermLiquidity Number)
(arg3isa valShortTermLiquidity Number)
(arg4isa valShortTermLiquidity Number)

(isa valLongTermSolvency Predicate)
(arity valLongTermSolvency 4)
(arg1isa valLongTermSolvency Business)
(arg2isa valLongTermSolvency Number)
(arg3isa valLongTermSolvency Number)
(arg4isa valLongTermSolvency Number)

(isa valProfitability Predicate)
(arity valProfitability 4)
(arg1isa valProfitability Business)
(arg2isa valProfitability Number)
(arg3isa valProfitability Number)
(arg4isa valProfitability Number)

(isa valUtility Predicate)
(arity valUtility 4)
(arg1isa valUtility Business)
(arg2isa valUtility Number)
(arg3isa valUtility Number)
(arg4isa valUtility Number)

(isa calSTL Predicate)
(arity calSTL 2)
(arg1isa calSTL Number)
(arg2isa calSTL Business)

(isa calLTS Predicate)
(arity calLTS 2)
(arg1isa calLTS Number)
(arg2isa calLTS Business)

(isa calPT Predicate)
(arity calPT 2)
(arg1isa calPT Number)
(arg2isa calPT Business)

(isa calUT Predicate)
(arity calUT 2)
(arg1isa calUT Number)
(arg2isa calUT Business)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; End of Code
